/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    posts: Post;
    pages: Page;
    projects: Project;
    tags: Tag;
    bookmarks: Bookmark;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    bookmarks: BookmarksSelect<false> | BookmarksSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    settings: Setting;
  };
  globalsSelect: {
    settings: SettingsSelect<false> | SettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  firstName: string;
  lastName: string;
  /**
   * Brief description about the user
   */
  bio?: string | null;
  /**
   * Profile picture
   */
  avatar?: (number | null) | Media;
  role: 'admin' | 'editor' | 'author' | 'viewer';
  socialLinks?: {
    /**
     * Personal website URL
     */
    website?: string | null;
    /**
     * Twitter/X handle (without @)
     */
    twitter?: string | null;
    /**
     * GitHub username
     */
    github?: string | null;
    /**
     * LinkedIn profile URL
     */
    linkedin?: string | null;
  };
  preferences?: {
    theme?: ('auto' | 'light' | 'dark') | null;
    /**
     * Receive email notifications
     */
    emailNotifications?: boolean | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alternative text for accessibility and SEO
   */
  alt: string;
  /**
   * Optional caption for the image
   */
  caption?: string | null;
  /**
   * Detailed description of the image
   */
  description?: string | null;
  /**
   * Photo credit or attribution
   */
  credit?: string | null;
  /**
   * Tags to help organize media files
   */
  tags?: (number | Tag)[] | null;
  /**
   * Focal point for responsive image cropping
   *
   * @minItems 2
   * @maxItems 2
   */
  focal?: [number, number] | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    desktop?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  name: string;
  /**
   * URL-friendly version of the tag name
   */
  slug: string;
  /**
   * Brief description of what this tag represents
   */
  description?: string | null;
  /**
   * Hex color code for tag styling (e.g., #3B82F6)
   */
  color?: string | null;
  /**
   * Optional icon name or emoji for the tag
   */
  icon?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  /**
   * URL-friendly version of the title
   */
  slug: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Brief description of the post for previews
   */
  excerpt?: string | null;
  /**
   * Main image for the post
   */
  featuredImage?: (number | null) | Media;
  status: 'draft' | 'published' | 'archived';
  /**
   * When this post should be published
   */
  publishedAt?: string | null;
  /**
   * Feature this post on the homepage
   */
  featured?: boolean | null;
  /**
   * Estimated reading time in minutes
   */
  readingTime?: number | null;
  tags?: (number | Tag)[] | null;
  author: number | User;
  seo?: {
    /**
     * Custom SEO title (falls back to post title)
     */
    title?: string | null;
    /**
     * Meta description for search engines
     */
    description?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
    /**
     * Custom image for social media sharing
     */
    ogImage?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * URL path for this page (e.g., "about", "contact")
   */
  slug: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Brief description of the page
   */
  excerpt?: string | null;
  /**
   * Main image for the page
   */
  featuredImage?: (number | null) | Media;
  status: 'draft' | 'published' | 'archived';
  /**
   * Page template to use for rendering
   */
  template?: ('default' | 'about' | 'contact' | 'landing') | null;
  /**
   * Include this page in the main navigation
   */
  showInNavigation?: boolean | null;
  /**
   * Order in navigation (lower numbers appear first)
   */
  navigationOrder?: number | null;
  seo?: {
    /**
     * Custom SEO title (falls back to page title)
     */
    title?: string | null;
    /**
     * Meta description for search engines
     */
    description?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
    /**
     * Custom image for social media sharing
     */
    ogImage?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  title: string;
  /**
   * URL-friendly version of the project title
   */
  slug: string;
  /**
   * Brief description of the project
   */
  description: string;
  /**
   * Detailed project information
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Main project image/screenshot
   */
  featuredImage: number | Media;
  /**
   * Additional project images
   */
  gallery?:
    | {
        image: number | Media;
        caption?: string | null;
        id?: string | null;
      }[]
    | null;
  status: 'draft' | 'published' | 'archived';
  /**
   * Feature this project on the homepage
   */
  featured?: boolean | null;
  /**
   * Current status of the project
   */
  projectStatus?: ('in-progress' | 'completed' | 'ongoing' | 'archived') | null;
  /**
   * When the project was started
   */
  startDate?: string | null;
  /**
   * When the project was completed (if applicable)
   */
  endDate?: string | null;
  /**
   * Technologies used in this project
   */
  technologies?:
    | {
        name: string;
        /**
         * Icon name or emoji for the technology
         */
        icon?: string | null;
        id?: string | null;
      }[]
    | null;
  links?: {
    /**
     * Link to live/deployed project
     */
    live?: string | null;
    /**
     * Link to GitHub repository
     */
    github?: string | null;
    /**
     * Link to demo or preview
     */
    demo?: string | null;
    /**
     * Link to project documentation
     */
    documentation?: string | null;
  };
  tags?: (number | Tag)[] | null;
  seo?: {
    /**
     * Custom SEO title (falls back to project title)
     */
    title?: string | null;
    /**
     * Meta description for search engines
     */
    description?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
    /**
     * Custom image for social media sharing
     */
    ogImage?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookmarks".
 */
export interface Bookmark {
  id: number;
  /**
   * Unique identifier from Instapaper API
   */
  instapaperID?: string | null;
  /**
   * The bookmark URL
   */
  url: string;
  /**
   * Bookmark title (from Instapaper or manually entered)
   */
  title: string;
  /**
   * Original description from the source
   */
  description?: string | null;
  /**
   * Data synced from Instapaper
   */
  instapaperData?: {
    /**
     * Starred in Instapaper
     */
    starred?: boolean | null;
    /**
     * Reading progress (0-1) from Instapaper
     */
    readingProgress?: number | null;
    /**
     * When bookmark was added to Instapaper
     */
    addedAt?: string | null;
  };
  /**
   * Feature this bookmark prominently
   */
  featured?: boolean | null;
  /**
   * Your commentary and thoughts about this bookmark (public)
   */
  publicNote?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Private notes (only visible in admin)
   */
  privateNote?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Categorize this bookmark
   */
  tags?: (number | Tag)[] | null;
  /**
   * Primary category for this bookmark
   */
  category?:
    | (
        | 'development'
        | 'design'
        | 'technology'
        | 'business'
        | 'personal'
        | 'tutorial'
        | 'article'
        | 'tool'
        | 'resource'
        | 'other'
      )
    | null;
  /**
   * Publication status
   */
  status: 'draft' | 'published' | 'archived';
  /**
   * When this bookmark should be published
   */
  publishedAt?: string | null;
  /**
   * Automatically extracted from the URL
   */
  metadata?: {
    /**
     * Domain name (e.g., github.com)
     */
    host?: string | null;
    /**
     * URL to the site favicon
     */
    faviconUrl?: string | null;
    /**
     * Featured image URL (og:image)
     */
    image?: string | null;
    /**
     * Content author if available
     */
    author?: string | null;
    /**
     * Original publication date
     */
    publishDate?: string | null;
    /**
     * Estimated reading time in minutes
     */
    readingTime?: number | null;
    /**
     * Content language
     */
    language?: string | null;
    /**
     * Extracted keywords
     */
    keywords?: string | null;
  };
  /**
   * Sync status with Instapaper
   */
  syncStatus: 'synced' | 'pending' | 'error' | 'manual';
  /**
   * Last successful sync with Instapaper
   */
  lastSyncedAt?: string | null;
  /**
   * Error message from last sync attempt
   */
  syncError?: string | null;
  seo?: {
    /**
     * Custom SEO title (falls back to bookmark title)
     */
    title?: string | null;
    /**
     * Meta description for search engines
     */
    description?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'bookmarks';
        value: number | Bookmark;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  firstName?: T;
  lastName?: T;
  bio?: T;
  avatar?: T;
  role?: T;
  socialLinks?:
    | T
    | {
        website?: T;
        twitter?: T;
        github?: T;
        linkedin?: T;
      };
  preferences?:
    | T
    | {
        theme?: T;
        emailNotifications?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  excerpt?: T;
  featuredImage?: T;
  status?: T;
  publishedAt?: T;
  featured?: T;
  readingTime?: T;
  tags?: T;
  author?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  content?: T;
  excerpt?: T;
  featuredImage?: T;
  status?: T;
  template?: T;
  showInNavigation?: T;
  navigationOrder?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  description?: T;
  content?: T;
  featuredImage?: T;
  gallery?:
    | T
    | {
        image?: T;
        caption?: T;
        id?: T;
      };
  status?: T;
  featured?: T;
  projectStatus?: T;
  startDate?: T;
  endDate?: T;
  technologies?:
    | T
    | {
        name?: T;
        icon?: T;
        id?: T;
      };
  links?:
    | T
    | {
        live?: T;
        github?: T;
        demo?: T;
        documentation?: T;
      };
  tags?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookmarks_select".
 */
export interface BookmarksSelect<T extends boolean = true> {
  instapaperID?: T;
  url?: T;
  title?: T;
  description?: T;
  instapaperData?:
    | T
    | {
        starred?: T;
        readingProgress?: T;
        addedAt?: T;
      };
  featured?: T;
  publicNote?: T;
  privateNote?: T;
  tags?: T;
  category?: T;
  status?: T;
  publishedAt?: T;
  metadata?:
    | T
    | {
        host?: T;
        faviconUrl?: T;
        image?: T;
        author?: T;
        publishDate?: T;
        readingTime?: T;
        language?: T;
        keywords?: T;
      };
  syncStatus?: T;
  lastSyncedAt?: T;
  syncError?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  description?: T;
  credit?: T;
  tags?: T;
  focal?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        desktop?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: number;
  /**
   * The name of your website
   */
  siteName: string;
  /**
   * Brief description of your website
   */
  siteDescription: string;
  /**
   * Full URL of your website (used for SEO and social sharing)
   */
  siteUrl: string;
  /**
   * Site logo
   */
  logo?: (number | null) | Media;
  /**
   * Site favicon
   */
  favicon?: (number | null) | Media;
  navLinks?:
    | {
        label: string;
        type: 'page' | 'url' | 'path';
        page?: (number | null) | Page;
        url?: string | null;
        /**
         * Custom path like /blog, /projects, etc.
         */
        path?: string | null;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Primary contact email
   */
  email?: string | null;
  /**
   * Contact phone number
   */
  phone?: string | null;
  socialLinks?:
    | {
        platform: 'github' | 'linkedin' | 'twitter' | 'instagram' | 'youtube' | 'discord' | 'other';
        url: string;
        /**
         * Custom label for "Other" platform
         */
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Default title template (e.g., "%s | Jared Connor")
   */
  seoTitle?: string | null;
  /**
   * Default meta description when page-specific description is not provided
   */
  seoDescription?: string | null;
  /**
   * Default keywords (comma-separated)
   */
  seoKeywords?: string | null;
  /**
   * Default Open Graph image for social sharing
   */
  seoImage?: (number | null) | Media;
  /**
   * Twitter handle (without @) for Twitter Card metadata
   */
  twitterHandle?: string | null;
  copyrightText?: string | null;
  footerLinks?:
    | {
        label: string;
        url: string;
        newTab?: boolean | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Additional footer content (rich text)
   */
  footerContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Primary brand color (hex code)
   */
  primaryColor?: string | null;
  /**
   * Secondary brand color (hex code)
   */
  secondaryColor?: string | null;
  fontFamily?: ('inter' | 'roboto' | 'open-sans' | 'lato' | 'poppins') | null;
  /**
   * Google Analytics tracking ID (GA4)
   */
  googleAnalyticsId?: string | null;
  /**
   * Google Tag Manager container ID
   */
  googleTagManagerId?: string | null;
  /**
   * Facebook Pixel ID
   */
  facebookPixelId?: string | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  siteName?: T;
  siteDescription?: T;
  siteUrl?: T;
  logo?: T;
  favicon?: T;
  navLinks?:
    | T
    | {
        label?: T;
        type?: T;
        page?: T;
        url?: T;
        path?: T;
        newTab?: T;
        id?: T;
      };
  email?: T;
  phone?: T;
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  seoTitle?: T;
  seoDescription?: T;
  seoKeywords?: T;
  seoImage?: T;
  twitterHandle?: T;
  copyrightText?: T;
  footerLinks?:
    | T
    | {
        label?: T;
        url?: T;
        newTab?: T;
        id?: T;
      };
  footerContent?: T;
  primaryColor?: T;
  secondaryColor?: T;
  fontFamily?: T;
  googleAnalyticsId?: T;
  googleTagManagerId?: T;
  facebookPixelId?: T;
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}